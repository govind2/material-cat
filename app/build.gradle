apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.fabric'

// Manifest version
def versionMajor = 2
def versionMinor = 0
def versionPatch = 0

// CI
def isCi = "true" == System.getenv("CI")
def preDexEnabled = "true" == System.getProperty("pre-dex", "true")

def packageName = "com.konifar.materialcat"

android {
    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildTools

    dexOptions {
        // Skip pre-dexing when running on CI or when disabled via -Dpre-dex=false.
        preDexLibraries = preDexEnabled && !isCi
    }

    defaultConfig {
        applicationId packageName
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode versionMajor * 10000 + versionMinor * 100 + versionPatch
        versionName "$versionMajor.$versionMinor.$versionPatch"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    signingConfigs {
        debug {
            storeFile rootProject.file("debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
        release {
            storeFile rootProject.file("release.keystore")
            storePassword System.getenv("RELEASE_STORE_PASSWORD")
            keyAlias System.getenv("RELEASE_KEY_ALIAS")
            keyPassword System.getenv("RELEASE_KEY_PASSWORD")
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            applicationIdSuffix '.debug'
            versionNameSuffix "-debug"
            debuggable true
            zipAlignEnabled true
        }
        release {
            signingConfig signingConfigs.release
            debuggable false
            zipAlignEnabled true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    productFlavors {
        develop {
            applicationId "${packageName}.develop"
        }
        production {
            applicationId packageName
        }
    }

    packagingOptions {
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/rxjava.properties'
    }

    dataBinding {
        enabled = true
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
}

dependencies {
    configurations.all {
        resolutionStrategy {
            force depends.support.v4
            force depends.support.appCompat
            force depends.support.cardView
            force depends.support.design
            force depends.support.recyclerView
            force depends.support.annotations
        }
    }

    compile project(':domain')
    compile project(':infra')

    compile depends.kotlin.stdlib

    // Support Library
    compile depends.support.v4
    compile depends.support.appCompat
    compile depends.support.palette
    compile depends.support.design
    compile depends.support.recyclerView
    compile depends.support.annotations

    // Ui
    compile depends.picasso
    compile depends.headerFooterGridView
    compile depends.circleImageView
    compile depends.fabTransformation

    // Sdk
    compile depends.facebook

    // Structure
    kapt depends.binding.compiler
    compile depends.dagger.core
    kapt depends.dagger.compiler
    compile depends.rxjava2.core
    compile depends.rxjava2.android
    compile depends.rxjava2.kotlin

    compile depends.arch.lifecycleRuntime
    compile depends.arch.lifecycleExtensions

    compile depends.support.multidex

    // Debug
    compile depends.stetho.core
    compile(depends.crashlytics) {
        transitive = true;
    }

    // Test
    testCompile depends.junit
    testCompile depends.robolectric.core
    testCompile depends.robolectric.shadowsMultidex
    testCompile depends.assertj.core
    testCompile depends.assertj.android
    testCompile depends.mockito.core
}
